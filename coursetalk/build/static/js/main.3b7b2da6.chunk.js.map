{"version":3,"sources":["components/UsernameForm.js","components/MessageList.js","components/SendMessageForm.js","ChatScreen.js","App.js","index.js"],"names":["UsernameForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","username","onSubmit","bind","assertThisInitialized","onChange","e","preventDefault","setState","target","value","react_default","a","createElement","type","placeholder","Component","MessageList","styles","container","overflowY","flex","ul","listStyle","li","marginTop","marginBottom","senderUsername","fontWeight","message","fontSize","style","objectSpread","messages","map","index","key","senderId","text","SendMessageForm","padding","borderTop","form","display","input","color","background","outline","border","ChatScreen","currentUser","currentRoom","sendMessage","roomId","id","_this2","Chatkit","ChatManager","instanceLocator","userId","currentUsername","tokenProvider","TokenProvider","url","connect","then","subscribeToRoom","messageLimit","hooks","onMessage","toConsumableArray","concat","catch","error","console","height","flexDirection","chatContainer","whosOnlineListContainer","width","backgroundColor","chatListContainer","components_MessageList","chatList","components_SendMessageForm","App","currentScreen","onUsernameSubmitted","fetch","method","headers","Content-Type","body","JSON","stringify","response","log","components_UsernameForm","src_ChatScreen","ReactDOM","render","src_App","document","getElementById"],"mappings":"uOAwCeA,cArCX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,SAAU,IAEdR,EAAKS,SAAWT,EAAKS,SAASC,KAAdT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAChBA,EAAKY,SAAWZ,EAAKY,SAASF,KAAdT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KANDA,wEASVa,GACLA,EAAEC,iBACFX,KAAKJ,MAAMU,SAASN,KAAKI,MAAMC,2CAG1BK,GACLV,KAAKY,SAAS,CAAEP,SAAUK,EAAEG,OAAOC,yCAInC,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,QAAMX,SAAUN,KAAKM,UACjBS,EAAAC,EAAAC,cAAA,SACIC,KAAK,OACLC,YAAY,iBACZV,SAAUT,KAAKS,WAEnBM,EAAAC,EAAAC,cAAA,SAAOC,KAAK,qBA9BTE,6CCyCZC,mLAvCP,IAAMC,EAAS,CACXC,UAAW,CACPC,UAAW,SACXC,KAAM,GAEVC,GAAI,CACAC,UAAW,QAEfC,GAAI,CACAC,UAAW,GACXC,aAAc,IAElBC,eAAgB,CACZC,WAAY,QAEhBC,QAAS,CAAEC,SAAU,KAEzB,OACInB,EAAAC,EAAAC,cAAA,OACIkB,MAAKrC,OAAAsC,EAAA,EAAAtC,CAAA,GACEE,KAAKJ,MAAMuC,MACXb,EAAOC,YAGdR,EAAAC,EAAAC,cAAA,MAAIkB,MAAOb,EAAOI,IACb1B,KAAKJ,MAAMyC,SAASC,IAAI,SAACL,EAASM,GAAV,OACrBxB,EAAAC,EAAAC,cAAA,MAAIuB,IAAKD,EAAOJ,MAAOb,EAAOM,IAC1Bb,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMkB,MAAOb,EAAOS,gBAAiBE,EAAQQ,UAAiB,KAElE1B,EAAAC,EAAAC,cAAA,KAAGkB,MAAOb,EAAOW,SAAUA,EAAQS,kBAhCrCtB,aC4DXuB,cA3DX,SAAAA,EAAY/C,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2C,IACf9C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6C,GAAAxC,KAAAH,KAAMJ,KACDQ,MAAQ,CACTsC,KAAM,IAEV7C,EAAKS,SAAWT,EAAKS,SAASC,KAAdT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAChBA,EAAKY,SAAWZ,EAAKY,SAASF,KAAdT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KANDA,wEASVa,GACLA,EAAEC,iBACFX,KAAKJ,MAAMU,SAASN,KAAKI,MAAMsC,MAC/B1C,KAAKY,SAAS,CAAE8B,KAAM,sCAGjBhC,GACLV,KAAKY,SAAS,CAAE8B,KAAMhC,EAAEG,OAAOC,QAC3Bd,KAAKJ,MAAMa,UACXT,KAAKJ,MAAMa,4CAKf,IAAMa,EAAS,CACXC,UAAW,CACPqB,QAAS,GACTC,UAAW,oBACXf,aAAc,IAElBgB,KAAM,CACFC,QAAS,QAEbC,MAAO,CACHC,MAAO,UACPC,WAAY,OACZC,QAAS,OACTC,OAAQ,OACR3B,KAAM,EACNS,SAAU,KAGlB,OACInB,EAAAC,EAAAC,cAAA,OAAKkB,MAAOb,EAAOC,WACfR,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMX,SAAUN,KAAKM,SAAU6B,MAAOb,EAAOwB,MACzC/B,EAAAC,EAAAC,cAAA,SACIC,KAAK,OACLC,YAAY,uCACZV,SAAUT,KAAKS,SACfK,MAAOd,KAAKI,MAAMsC,KAClBP,MAAOb,EAAO0B,kBAnDZ5B,aCiGfiC,cA7FX,SAAAA,EAAYzD,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqD,IACfxD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuD,GAAAlD,KAAAH,KAAMJ,KACDQ,MAAQ,CACTkD,YAAa,GACbC,YAAa,GACblB,SAAU,IAEdxC,EAAK2D,YAAc3D,EAAK2D,YAAYjD,KAAjBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAPJA,2EAUP6C,GACR1C,KAAKI,MAAMkD,YAAYE,YAAY,CAC/Bd,OACAe,OAAQzD,KAAKI,MAAMmD,YAAYG,iDAIlB,IAAAC,EAAA3D,KACG,IAAI4D,IAAQC,YAAY,CACxCC,gBAAiB,8CACjBC,OAAQ/D,KAAKJ,MAAMoE,gBACnBC,cAAe,IAAIL,IAAQM,cAAc,CACrCC,IAAK,yCAKRC,UACAC,KAAK,SAAAf,GAEF,OADAK,EAAK/C,SAAS,CAAE0C,gBACTA,EAAYgB,gBAAgB,CAC/Bb,OAAQ,WACRc,aAAc,IACdC,MAAO,CACHC,UAAW,SAAAxC,GACP0B,EAAK/C,SAAS,CACVyB,SAASvC,OAAA4E,EAAA,EAAA5E,CAAK6D,EAAKvD,MAAMiC,UAAjBsC,OAAA,CAA2B1C,YAMtDoC,KAAK,SAAAd,GACFI,EAAK/C,SAAS,CAAE2C,kBAEnBqB,MAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAM,QAASA,sCAI3C,IAAMvD,EAAS,CACXC,UAAW,CACPwD,OAAQ,QACRhC,QAAS,OACTiC,cAAe,UAEnBC,cAAe,CACXlC,QAAS,OACTtB,KAAM,GAEVyD,wBAAyB,CACrBC,MAAO,QACP1D,KAAM,OACNmB,QAAS,GACTwC,gBAAiB,UACjBnC,MAAO,SAEXoC,kBAAmB,CACfzC,QAAS,GACTuC,MAAO,MACPpC,QAAS,OACTiC,cAAe,WAIvB,OACIjE,EAAAC,EAAAC,cAAA,OAAKkB,MAAOb,EAAOC,WACfR,EAAAC,EAAAC,cAAA,OAAKkB,MAAOb,EAAO2D,eACflE,EAAAC,EAAAC,cAAA,SAAOkB,MAAOb,EAAO4D,yBACjBnE,EAAAC,EAAAC,cAAA,uCAEJF,EAAAC,EAAAC,cAAA,WAASkB,MAAOb,EAAO+D,mBACnBtE,EAAAC,EAAAC,cAACqE,EAAD,CACIjD,SAAUrC,KAAKI,MAAMiC,SACrBF,MAAOb,EAAOiE,WAElBxE,EAAAC,EAAAC,cAACuE,EAAD,CAAiBlF,SAAUN,KAAKwD,wBAtF/BpC,aCqCVqE,cArCX,SAAAA,IAAc,IAAA5F,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAyF,IACV5F,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2F,GAAAtF,KAAAH,QACKI,MAAQ,CACT4D,gBAAiB,GACjB0B,cAAe,4BAEnB7F,EAAK8F,oBAAsB9F,EAAK8F,oBAAoBpF,KAAzBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KANjBA,mFASMQ,GAAU,IAAAsD,EAAA3D,KAC1B4F,MAAM,8BAA+B,CACjCC,OAAQ,OACRC,QAAS,CACLC,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAAE7F,eAEtBgE,KAAK,SAAA8B,GACFxC,EAAK/C,SAAS,CACVoD,gBAAiB3D,EACjBqF,cAAe,iBAGtBd,MAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAM,QAASA,sCAK3C,OADAC,QAAQsB,IAAIpG,KAAKI,MAAMsF,eACU,6BAA7B1F,KAAKI,MAAMsF,cACJ3E,EAAAC,EAAAC,cAACoF,EAAD,CAAc/F,SAAUN,KAAK2F,sBAEP,eAA7B3F,KAAKI,MAAMsF,cACJ3E,EAAAC,EAAAC,cAACqF,EAAD,CAAYtC,gBAAiBhE,KAAKI,MAAM4D,uBADnD,SAhCU5C,mBCClBmF,IAASC,OAAOzF,EAAAC,EAAAC,cAACwF,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.3b7b2da6.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass UsernameForm extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            username: '',\n        }\n        this.onSubmit = this.onSubmit.bind(this)\n        this.onChange = this.onChange.bind(this)\n    }\n\n    onSubmit(e) {\n        e.preventDefault()\n        this.props.onSubmit(this.state.username)\n    }\n\n    onChange(e) {\n        this.setState({ username: e.target.value })\n    }\n\n    render() {\n        return (\n            <div>\n                <div>\n                    <h2>What is your username?</h2>\n                    <form onSubmit={this.onSubmit}>\n                        <input\n                            type=\"text\"\n                            placeholder=\"Your full name\"\n                            onChange={this.onChange}\n                        />\n                        <input type=\"submit\" />\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default UsernameForm\n","import React, { Component } from 'react'\n\nclass MessageList extends Component {\n    render() {\n        const styles = {\n            container: {\n                overflowY: 'scroll',\n                flex: 1,\n            },\n            ul: {\n                listStyle: 'none',\n            },\n            li: {\n                marginTop: 13,\n                marginBottom: 13,\n            },\n            senderUsername: {\n                fontWeight: 'bold',\n            },\n            message: { fontSize: 15 },\n        }\n        return (\n            <div\n                style={{\n                    ...this.props.style,\n                    ...styles.container,\n                }}\n            >\n                <ul style={styles.ul}>\n                    {this.props.messages.map((message, index) => (\n                        <li key={index} style={styles.li}>\n                            <div>\n                                <span style={styles.senderUsername}>{message.senderId}</span>{' '}\n                            </div>\n                            <p style={styles.message}>{message.text}</p>\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default MessageList\n","import React, { Component } from 'react'\n\nclass SendMessageForm extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            text: '',\n        }\n        this.onSubmit = this.onSubmit.bind(this)\n        this.onChange = this.onChange.bind(this)\n    }\n\n    onSubmit(e) {\n        e.preventDefault()\n        this.props.onSubmit(this.state.text)\n        this.setState({ text: '' })\n    }\n\n    onChange(e) {\n        this.setState({ text: e.target.value })\n        if (this.props.onChange) {\n            this.props.onChange()\n        }\n    }\n\n    render() {\n        const styles = {\n            container: {\n                padding: 20,\n                borderTop: '1px #4C758F solid',\n                marginBottom: 20,\n            },\n            form: {\n                display: 'flex',\n            },\n            input: {\n                color: 'inherit',\n                background: 'none',\n                outline: 'none',\n                border: 'none',\n                flex: 1,\n                fontSize: 16,\n            },\n        }\n        return (\n            <div style={styles.container}>\n                <div>\n                    <form onSubmit={this.onSubmit} style={styles.form}>\n                        <input\n                            type=\"text\"\n                            placeholder=\"Type a message here then press ENTER\"\n                            onChange={this.onChange}\n                            value={this.state.text}\n                            style={styles.input}\n                        />\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SendMessageForm\n","import React, { Component } from 'react'\nimport Chatkit from '@pusher/chatkit-client'\nimport MessageList from './components/MessageList'\nimport SendMessageForm from './components/SendMessageForm'\n\nclass ChatScreen extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            currentUser: {},\n            currentRoom: {},\n            messages: []\n        }\n        this.sendMessage = this.sendMessage.bind(this)\n    }\n\n    sendMessage(text) {\n        this.state.currentUser.sendMessage({\n            text,\n            roomId: this.state.currentRoom.id,\n        })\n    }\n\n    componentDidMount () {\n        const chatManager = new Chatkit.ChatManager({\n            instanceLocator: 'v1:us1:3b31d86f-e2f8-4671-92e2-3a0e2d460298', // ID from Chatkit\n            userId: this.props.currentUsername,\n            tokenProvider: new Chatkit.TokenProvider({\n                url: 'http://localhost:3001/authenticate',\n            }),\n        })\n\n        chatManager\n            .connect()\n            .then(currentUser => {\n                this.setState({ currentUser })\n                return currentUser.subscribeToRoom({\n                    roomId: \"19379093\",  // Room ID from Chatkit\n                    messageLimit: 100,\n                    hooks: {\n                        onMessage: message => {\n                            this.setState({\n                                messages: [...this.state.messages, message],\n                            })\n                        },\n                    },\n                })\n            })\n            .then(currentRoom => {\n                this.setState({ currentRoom })\n            })\n            .catch(error => console.error('error', error))\n    }\n\n    render() {\n        const styles = {\n            container: {\n                height: '100vh',\n                display: 'flex',\n                flexDirection: 'column',\n            },\n            chatContainer: {\n                display: 'flex',\n                flex: 1,\n            },\n            whosOnlineListContainer: {\n                width: '300px',\n                flex: 'none',\n                padding: 20,\n                backgroundColor: '#2c303b',\n                color: 'white'\n            },\n            chatListContainer: {\n                padding: 20,\n                width: '85%',\n                display: 'flex',\n                flexDirection: 'column',\n            },\n        }\n\n        return (\n            <div style={styles.container}>\n                <div style={styles.chatContainer}>\n                    <aside style={styles.whosOnlineListContainer}>\n                        <h2>Who's online PLACEHOLDER</h2>\n                    </aside>\n                    <section style={styles.chatListContainer}>\n                        <MessageList\n                            messages={this.state.messages}\n                            style={styles.chatList}\n                        />\n                        <SendMessageForm onSubmit={this.sendMessage} />\n                    </section>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ChatScreen\n","import React, { Component } from 'react'\nimport UsernameForm from './components/UsernameForm'\nimport ChatScreen from './ChatScreen'\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            currentUsername: '',\n            currentScreen: 'WhatIsYourUsernameScreen'\n        }\n        this.onUsernameSubmitted = this.onUsernameSubmitted.bind(this)\n    }\n\n    onUsernameSubmitted(username) {\n        fetch('http://localhost:3001/users', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ username }),\n        })\n            .then(response => {\n                this.setState({\n                    currentUsername: username,\n                    currentScreen: 'ChatScreen'\n                })\n            })\n            .catch(error => console.error('error', error))\n    }\n\n    render() {\n        console.log(this.state.currentScreen)\n        if (this.state.currentScreen === 'WhatIsYourUsernameScreen') {\n            return <UsernameForm onSubmit={this.onUsernameSubmitted} />\n        }\n        if (this.state.currentScreen === 'ChatScreen') {\n            return <ChatScreen currentUsername={this.state.currentUsername} />\n        }\n    }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}